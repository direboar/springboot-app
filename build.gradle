//https://qiita.com/opengl-8080/items/6409669dc3f8b8071af4
buildscript {
    ext {
        //囲み文字は、全体的に" で囲ったほうがトラブルになりにくい。 ''で囲った場合に、${変数}が解決されないため。
        springBootVersion = "2.1.6.RELEASE"
        spotbugsGradlePluginVersion = "2.0.0"
        lombokVersion = "3.8.2"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        //https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/
        //springBootのjar生成や、依存関係の解決をする。 指定したバージョンのBOM(spring-boot-dependencies)で規定したバージョンに、依存JARをそろえる。
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        
        //https://plugins.gradle.org/plugin/com.github.spotbugs
        classpath("gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotbugsGradlePluginVersion}")

        //lombokでは、公式でgradle pluginの採用を進めている。pluginを使うと、lombokをdependeniesに追加不要。
        //eclipse上での認識も、プラグインがないとうまく動かない。
        //https://projectlombok.org/setup/gradle
        classpath "io.freefair.gradle:lombok-plugin:${lombokVersion}"

    }
}

//see https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
//https://discuss.gradle.org/t/cannot-use-plugins-block-inside-subprojects-block/13570/3
subprojects {
  apply plugin: "java"
  apply plugin: "checkstyle"
  apply plugin: "pmd"
  apply plugin: "com.github.spotbugs"
  apply plugin: "jacoco"
  apply plugin: "org.springframework.boot"
  apply plugin: "io.spring.dependency-management"
  
  apply plugin: "io.freefair.lombok"
  
  ext {
    springBootMybatisVersion = "2.1.0"
    dbUnitVersion = "2.6.0"
    
    checkstyleVersion = "8.18"
    pmdVersion = "6.17.0"
    spotbugsVersion = "4.0.0-beta1"
    jacocoVersion = "0.8.2"
    
    slf4jVersion="1.7.21"
  }

  configurations {
      developmentOnly
      runtimeClasspath {
          extendsFrom developmentOnly
      }
  }
  
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
  
  repositories {
      mavenCentral()
      jcenter()
  }
  
  dependencies {
      //spring-boot-gradle-pluginがバージョンを解決するものは、そのバージョンを使用する。（個別に設定しても、強制的に上書きされる）
      //Spring MVC
      implementation "org.springframework.boot:spring-boot-starter-web"
      //Spring Mybatis
      implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${springBootMybatisVersion}"
      //Devtools
      developmentOnly("org.springframework.boot:spring-boot-devtools")
  
      //test
      //https://qiita.com/gumimin/items/f15eaede3e0e5b7a11a5
      testImplementation ("org.springframework.boot:spring-boot-starter-test"){
          exclude module: "junit"
      }
      //junit5
      testImplementation "org.junit.jupiter:junit-jupiter-api"
      testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

      //dbUnit
      testImplementation "org.dbunit:dbunit:${dbUnitVersion}"

      //h2（インメモリDBを利用）
      //https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/boot-features-sql.html#boot-features-embedded-database-support
      runtimeOnly "com.h2database:h2"
   	  
      //slf4j spotBugsが「SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".」というエラーを出すことに対する暫定対処。
      //https://qiita.com/m4kvn/items/3b68e6879672a4202e3d
      //issue : https://github.com/spotbugs/spotbugs-gradle-plugin/issues/133
      //versionはBOMで解決済み
      compileOnly "org.slf4j:slf4j-log4j12"
      
  }
  
  //https://docs.gradle.org/5.3/userguide/building_java_projects.html
  //https://m213f.hateblo.jp/entry/2018/10/26/210803
  //Javacへの指定
  tasks.withType(JavaCompile) {
    //エンコーディングを指定。
    options.encoding = "UTF-8"
  }
  //JavaDocへの指定
  tasks.withType(Javadoc) {
     //エンコーディングを指定。
    options.encoding = "UTF-8"
  }
  
  //checkstyleの設定。
  checkstyle {
      configFile = file("${rootProject.projectDir}/config/checkstyle.xml")
      toolVersion = "${checkstyleVersion}"
      sourceSets = [project.sourceSets.main]
      ignoreFailures = true
  }
  
  //pmdの設定
  pmd {
      //FIXME ルールファイルを作成する。
      
      toolVersion = "${pmdVersion}"
      //暫定で組み込みのルールを設定。
      //https://pmd.github.io/pmd/pmd_rules_java.html
      //prefix「java」が必要
      //https://qiita.com/toastkidjp/items/180e69d49cbdccb7d3fe
      ruleSets = ["java-quickstart"]
      sourceSets = [project.sourceSets.main] 
      ignoreFailures = true
      consoleOutput = true
  }
  
  //spotbugsの設定
  //「現バージョンの SpotBugs Gradle プラグインは FindBugs Gradle プラグインと同じ方法で設定します。」とのこと。
  //https://spotbugs.readthedocs.io/ja/latest/gradle.html  
  //https://spotbugs.readthedocs.io/ja/latest/migration.html
  spotbugs {
    toolVersion = "${spotbugsVersion}"
    sourceSets = [project.sourceSets.main] 
    ignoreFailures = true
    effort = "max"
  }
  // To generate an HTML report instead of XML
  tasks.withType(com.github.spotbugs.SpotBugsTask) { //tasks.withType(タスク型）で、タスクコンテナから指定されたタスクを取得する。
    reports.xml.enabled = false
    reports.html.enabled = true
  }
  
  //jacocoの設定
  jacoco{
      toolVersion = "${jacocoVersion}"
  }
  
  //jacocoのレポート出力設定
  jacocoTestReport {
      reports {
          xml.enabled false
          csv.enabled false
          html.destination file("${buildDir}/jacocoHtml")
      }
  }
  
  test {
      //junit5.
      //@see https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useJUnitPlatform--
      //Specifies that JUnit Platform (a.k.a. JUnit 5) should be used to execute the tests.
      //junit5に、jupiterを使うのか、Vintageを使うのかを指定する。デフォルトはクラスパスにある方が使用される。
      
      useJUnitPlatform()
  
      //test実行時のjacoco設定。（jacocoがテスト実行時に生成するダンプ情報の出力先指定。jacocoレポート出力はtestタスクとは別に実行する必要あり。）
      jacoco {
          destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
          classDumpDir = file("$buildDir/jacoco/classpathdumps")
      }
  }
}

